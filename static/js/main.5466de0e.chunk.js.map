{"version":3,"sources":["components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["TextForm","props","useState","text","setText","className","style","color","mode","headings","value","onChange","event","target","id","rows","background","onClick","newText","toUpperCase","showAlert","toLowerCase","arr","split","i","length","charAt","slice","join","chars","document","getElementById","select","navigator","clipboard","writeText","trim","Alert","alert","type","role","msg","App","setMode","setAlert","message","setTimeout","href","body","backgroundColor","htmlFor","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"oMAGe,SAASA,EAASC,GAE7B,IA2DA,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,OACI,qCACA,sBAAKC,UAAU,YAAYC,MAAO,CAACC,MAAsB,SAAfN,EAAMO,KAAkB,QAAU,SAA5E,UACI,6BAAKP,EAAMQ,WACX,qBAAKJ,UAAU,OAAf,SAEA,0BAAUA,UAAU,eAAeK,MAAQP,EAAMQ,SAZlC,SAACC,GAEpBR,EAAQQ,EAAMC,OAAOH,QAU2DI,GAAG,QAAQC,KAAK,IAAIT,MAAO,CAACU,WAA2B,SAAff,EAAMO,KAAkB,UAAY,QAASD,MAAsB,SAAfN,EAAMO,KAAkB,QAAU,aAE1M,wBAAQH,UAAU,uBAAuBY,QApExB,WAErB,IAAIC,EAAUf,EAAKgB,cACnBf,EAAQc,GACRjB,EAAMmB,UAAU,wBAAyB,YAgErC,kCACA,wBAAQf,UAAU,uBAAuBY,QA9DxB,WACrB,IAAIC,EAAUf,EAAKkB,cACnBjB,EAAQc,GACRjB,EAAMmB,UAAU,wBAAyB,YA2DrC,kCACA,wBAAQf,UAAU,uBAAuBY,QAzDxB,WAErBb,EADc,IAEdH,EAAMmB,UAAU,0BAA2B,YAsDvC,wBACA,wBAAQf,UAAU,uBAAuBY,QApDlB,WAE3B,IADA,IAAIK,EAAMnB,EAAKoB,MAAM,KACbC,EAAE,EAAGA,EAAEF,EAAIG,OAAQD,IACvBF,EAAIE,GAAKF,EAAIE,GAAGE,OAAO,GAAGP,cAAgBG,EAAIE,GAAGG,MAAM,GAE3D,IAAIT,EAAUI,EAAIM,KAAK,KACvBxB,EAAQc,GACRjB,EAAMmB,UAAU,+BAAgC,YA6C5C,8BACA,wBAAQf,UAAU,uBAAuBY,QA3ClB,WAG3B,IAFA,IAAIY,EAAQ1B,EAAKkB,cAAcE,MAAM,IAE7BC,EAAI,EAAGA,EAAGK,EAAMJ,OAAQD,GAAK,EACjCK,EAAML,GAAKK,EAAML,GAAGL,cAExB,IAAID,EAAUW,EAAMD,KAAK,IACzBxB,EAAQc,GACRjB,EAAMmB,UAAU,wBAAyB,YAmCrC,8BACA,wBAAQf,UAAU,uBAAuBY,QAjC9B,WACf,IAAId,EAAO2B,SAASC,eAAe,SACnC5B,EAAK6B,SACLC,UAAUC,UAAUC,UAAUhC,EAAKO,OACnCT,EAAMmB,UAAU,SAAU,YA6BtB,uBACA,wBAAQf,UAAU,uBAAuBY,QA1BvB,WACtB,IAAIC,EAAUf,EAAKoB,MAAM,QACzBnB,EAAQc,EAAQU,KAAK,MACrB3B,EAAMmB,UAAU,mCAAoC,YAuBhD,oCAEJ,sBAAKf,UAAU,iBAAiBC,MAAO,CAACC,MAAsB,SAAfN,EAAMO,KAAkB,QAAU,SAAjF,UACI,mDACA,8BAAY,KAARL,EAAY,EAAGA,EAAKiC,OAAOb,MAAM,KAAKE,OAA1C,WAA0DtB,EAAKsB,OAA/D,iBACA,8BAAI,KAAQtB,EAAKoB,MAAM,KAAKE,OAA5B,sBACA,yCACA,4BAAItB,EAAKsB,OAAO,EAAItB,EAAM,2CCpFvB,SAASkC,EAAMpC,GAC1B,OACQA,EAAMqC,OAAS,sBAAKjC,UAAS,sBAAiBJ,EAAMqC,MAAMC,KAA7B,gCAAiEC,KAAK,QAApF,UACX,iCAASvC,EAAMqC,MAAMC,OADV,KAC2BtC,EAAMqC,MAAMG,OCsFnDC,MA7Ef,WAEE,MAAwBxC,mBAAS,SAAjC,mBAAOM,EAAP,KAAamC,EAAb,KACA,EAA0BzC,mBAAS,MAAnC,mBAAOoC,EAAP,KAAcM,EAAd,KAEMxB,EAAY,SAACyB,EAASN,GAC1BK,EAAS,CACPH,IAAKI,EACLN,KAAMA,IAERO,YAAW,WACTF,EAAS,QACT,OAgBJ,OACE,qCACA,qBAAKvC,UAAS,yCAAoCG,EAApC,eAA+CA,GAA7D,SACF,sBAAKH,UAAU,kBAAf,UACE,mBAAGA,UAAU,eAAe0C,KAAK,IAAjC,sBACA,wBAAQ1C,UAAU,iBAAiBkC,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACE,sBAAMlC,UAAU,0BAElB,sBAAKA,UAAU,2BAA2BS,GAAG,yBAA7C,UACE,oBAAIT,UAAU,kCAAd,SACE,oBAAIA,UAAU,WAAd,SACE,mBAAGA,UAAU,kBAAkB,eAAa,OAAO0C,KAAK,IAAxD,sBAMJ,sBAAK1C,UAAS,sCAAwC,UAAPG,EAAgB,OAAS,SAAxE,UACE,uBAAOH,UAAU,mBAAmBY,QA/BvB,WACL,UAATT,GACDmC,EAAQ,QACRb,SAASkB,KAAK1C,MAAM2C,gBAAkB,UACtC7B,EAAU,0CAA2C,aAGrDuB,EAAQ,SACRb,SAASkB,KAAK1C,MAAM2C,gBAAkB,QACtC7B,EAAU,2CAA4C,aAsBKmB,KAAK,WAAWzB,GAAG,2BAC5E,uBAAOT,UAAU,mBAAmB6C,QAAQ,yBAA5C,yCAWR,cAACb,EAAD,CAAOC,MAAOA,IACd,qBAAKjC,UAAU,iBAAf,SAMY,cAACL,EAAD,CAAUoB,UAAWA,EAAWX,SAAS,4BAA4BD,KAAMA,UCnExE2C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFhC,SAASC,eAAe,SAM1BoB,K","file":"static/js/main.5466de0e.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleUpperClick = () => {\r\n        // console.log(\"UpperCase was Clicked!\" + text)\r\n        let newText = text.toUpperCase()\r\n        setText(newText)\r\n        props.showAlert(\"Conerted to UpperCase\", \"success\")\r\n    }\r\n\r\n    const handleLowerClick = () => {\r\n        let newText = text.toLowerCase()\r\n        setText(newText)\r\n        props.showAlert(\"Conerted to LowerCase\", \"success\")\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        let newText = \"\"\r\n        setText(newText)\r\n        props.showAlert(\"succefully cleared text\", \"success\")\r\n    }\r\n\r\n    const handleCapitalizedClick = () => {\r\n        let arr = text.split(\" \");\r\n        for(let i=0; i<arr.length; i++) {\r\n            arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1)\r\n        }\r\n        let newText = arr.join(\" \");\r\n        setText(newText)\r\n        props.showAlert(\"Conerted to capitalized form\", \"success\")\r\n    }\r\n\r\n    const handleAlternativeClick = () => {\r\n        let chars = text.toLowerCase().split(\"\")\r\n\r\n        for(let i = 0; i< chars.length; i += 2){\r\n            chars[i] = chars[i].toUpperCase();\r\n        }\r\n        let newText = chars.join(\"\")\r\n        setText(newText)\r\n        props.showAlert(\"Conerted successfully\", \"success\")\r\n    }\r\n\r\n    const handleCopy = () => {\r\n        let text = document.getElementById(\"myBox\")\r\n        text.select()\r\n        navigator.clipboard.writeText(text.value)\r\n        props.showAlert(\"Copied\", \"success\")\r\n\r\n    }\r\n\r\n    const handleExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/)\r\n        setText(newText.join(\" \"))\r\n        props.showAlert(\"Successfully removed extra space\", \"success\")\r\n    }\r\n\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"on change\")\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const [text, setText] = useState('')\r\n    return (\r\n        <>\r\n        <div className=\"container\" style={{color: props.mode === 'dark' ? 'white' : 'black'}}>\r\n            <h1>{props.headings}</h1>\r\n            <div className=\"mb-3\">\r\n            {/* <label for=\"myBox\" className=\"form-label\">Example textarea</label> */}\r\n            <textarea className=\"form-control\" value ={text} onChange= {handleOnChange} id=\"myBox\" rows=\"8\" style={{background: props.mode === 'dark' ? '#385c7a' : 'white', color: props.mode === 'dark' ? 'white' : 'black'}}></textarea>\r\n            </div>\r\n            <button className=\"btn btn-primary mx-1\" onClick = {handleUpperClick}>Convert to Uppercase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick = {handleLowerClick}>Convert to LowerCase</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick = {handleClearClick}>Clear Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick = {handleCapitalizedClick}>Capitalized Case</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick= {handleAlternativeClick}>Alternative Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick = {handleCopy}>Copy Text</button>\r\n            <button className=\"btn btn-primary mx-1\" onClick = {handleExtraSpaces}>Remove Extra Spaces</button>\r\n        </div>\r\n        <div className=\"container my-2\" style={{color: props.mode === 'dark' ? 'white' : 'black'}}>\r\n            <h2>Your Text Summary</h2>\r\n            <p>{text=== ''? 0: text.trim().split(\" \").length} words, {text.length} characters</p>\r\n            <p>{0.008 * text.split(\" \").length} Minutes to read</p>\r\n            <h2>Preview</h2>\r\n            <p>{text.length>0 ? text: \"Enter something to preview here!\"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    return (\r\n            props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{props.alert.type}</strong>: {props.alert.msg}\r\n                {/* <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"alert\" aria-label=\"Close\"></button> */}\r\n            </div>\r\n    )\r\n}\r\n\r\n","import './App.css';\n// import About from './components/About';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\n\nfunction App() {\n\n  const [mode, setMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    })\n    setTimeout(() => {\n      setAlert(null)\n    },1500)\n  }\n\n  const toggleMode = () => {\n    if(mode === 'light'){\n      setMode('dark')\n      document.body.style.backgroundColor = \"#385c7a\"\n      showAlert(\"Dark mode has been successfully enabled\", \"success\")\n    }\n    else{\n      setMode('light')\n      document.body.style.backgroundColor = \"white\"\n      showAlert(\"Light mode has been successfully enabled\", \"success\")\n    }\n  }\n\n  return (\n    <>\n    <nav className={`navbar navbar-expand-lg navbar-${mode} bg-${mode}`}>\n  <div className=\"container-fluid\">\n    <a className=\"navbar-brand\" href=\"#\">ReactCWH</a>\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n        <li className=\"nav-item\">\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\n        </li>\n        {/* <li className=\"nav-item\">\n          <Link className=\"nav-link\" to=\"/about\">About</Link>\n        </li> */}\n      </ul>\n      <div className={`form-check form-switch text-${mode==='light' ?'dark' : 'light'}`}>\n        <input className=\"form-check-input\" onClick={toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Drak Mode</label>\n  </div>\n      {/* <form className=\"d-flex\">\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\n      </form> */}\n     </div>\n  </div>\n</nav>\n\n\n<Alert alert={alert}/>\n<div className=\"container my-3\" >\n      {/* <Switch> */}\n          {/* <Route exact path=\"/about\">\n            <About />\n          </Route>\n          <Route exact path=\"/\"> */}\n            <TextForm showAlert={showAlert} headings=\"Enter the text to analyze\" mode={mode}/>\n          {/* </Route> */}\n      {/* </Switch> */}\n  \n  \n  {/* <About /> */}\n</div>\n{/* </Router> */}\n    </>\n  );\n        }\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}